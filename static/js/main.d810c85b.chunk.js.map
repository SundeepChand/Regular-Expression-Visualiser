{"version":3,"sources":["components/Header/Header.js","components/Input/Input.js","components/Output/Output.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Input","props","className","type","placeholder","value","pattern","onChange","handleChange","Output","matches","char","ref","backdropRef","highlightRef","textAreaRef","onScroll","handleScroll","text","Footer","App","useState","setPattern","setText","setMatches","charachter","setCharacter","useEffect","console","log","current","innerHTML","match","regex","RegExp","textToSlice","i","exec","offset","start","index","end","length","classname","slice","error","processPattern","useRef","event","target","scrollTop","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d810c85b.chunk.js","sourcesContent":["import React from 'react'\nimport './style/header.css'\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>RegEx ViZ</h1>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport './styles/input.css'\n\nconst Input = (props) => {\n  return (\n    <div className={'input-container'}>\n      <div className={'header-div'}>\n        <h4>Pattern:</h4>\n      </div>\n\n      <div className={'input-form-div'}>\n        <input\n          type='text'\n          placeholder={'Enter regex'}\n          value={props.pattern}\n          onChange={props.handleChange}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Input\n","import React from 'react'\nimport './styles/highlight.css'\n\nconst Output = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"header\">\n              <h4>Result</h4>\n              <p>{props.matches} Match{props.matches > 1 ? 'es' : ''} found of {props.char} characters</p>\n            </div>\n            <div ref={props.backdropRef} className=\"backdrop\">\n                <div ref={props.highlightRef} className=\"highlights\">\n                </div>\n            </div>\n\n            <textarea\n                ref={props.textAreaRef}\n                onScroll={props.handleScroll}\n                placeholder=\"Enter text to analyze...\"\n                value={props.text}\n                onChange={props.handleChange}\n            >\n            </textarea>\n        </div>\n    )\n}\n\nexport default Output\n","import React from 'react'\nimport './styles/footer.css'\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>&copy; Sundeep Chand, 2020</p>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React, { useState, useEffect, useRef } from 'react'\nimport Header from './components/Header/Header'\nimport Input from './components/Input/Input'\nimport Output from './components/Output/Output'\nimport Footer from './components/Footer/Footer'\nimport './App.css'\n\nconst App = () => {\n\n  const [pattern, setPattern] = useState('')\n  const [text, setText] = useState('')\n  const [matches, setMatches] = useState(0)\n  const [charachter, setCharacter] = useState(0)\n\n  const processPattern = () => {\n    console.log(pattern, text)\n\n    highlightRef.current.innerHTML = text\n\n    if (text !== '' && pattern !== '') {\n      try {\n        const regex = RegExp(pattern, 'g')\n\n        let match, textToSlice = text, i = 0\n        while ((match = regex.exec(text)) !== null && match[0] !== '') {\n          let offset = i * 26\n          var start = match.index + offset\n          let end = start + match[0].length - 1\n\n          console.log(`${match[0]}: ${start} - ${end}`)\n          let classname = ''\n          if (i % 2 === 0) {\n            classname = 'class=\"even\"'\n          } else {\n            classname = 'class=\"_odd\"'\n          }\n\n          highlightRef.current.innerHTML = textToSlice.slice(0, start)+\n            '<mark '+ classname + '>' +\n              textToSlice.slice(start, end + 1)+\n            '</mark>'+\n            textToSlice.slice(end + 1)\n\n          console.log(highlightRef.current.innerHTML)\n          textToSlice = highlightRef.current.innerHTML\n          i++\n        }\n        setMatches(i)\n\n      } catch (error) {\n\n      }\n    } else {\n      setMatches(0)\n    }\n  }\n\n  useEffect(() => {\n    processPattern()\n  })\n\n  const handleScroll = () => {\n    backdropRef.current.scrollTop = textAreaRef.current.scrollTop\n  }\n\n  const textAreaRef = useRef()\n  const backdropRef = useRef()\n  const highlightRef = useRef()\n\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <div className={'content'}>\n        <Input\n          pattern={pattern}\n          handleChange={(event) => {\n            setPattern(event.target.value)\n          }}\n        />\n\n        <Output\n          text={text}\n          char={charachter}\n          matches={matches}\n          textAreaRef={textAreaRef}\n          highlightRef={highlightRef}\n          backdropRef={backdropRef}\n          handleScroll={handleScroll}\n          handleChange={(event) => {\n            setText(event.target.value)\n            setCharacter(event.target.value.length)\n          }}\n        />\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}